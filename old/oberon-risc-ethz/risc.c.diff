--- osrc/risc.c	2014-06-21 08:47:25.000000000 -0700
+++ src/risc.c	2014-06-21 11:30:16.000000000 -0700
@@ -20,11 +20,14 @@
 // As we don't change DisplayStart, this extra memory is not useful for a
 // larger heap.
 
-#define MemSize      0x00180000
+#define MemSize      0x40000000  // again expanded, for a larger heap
 #define MemWords     (MemSize / 4)
 #define ROMStart     0xFFFFF800
 #define ROMWords     512
 #define DisplayStart 0x000E7F00
+#define DisplayDepth 1           // not used yet, for color displays
+#define AltDisplaySize 0x100000
+#define AltDisplayStart MemSize - AltDisplaySize
 #define IOStart      0xFFFFFFC0
 
 
@@ -49,6 +52,7 @@
   int fb_width;   // words
   int fb_height;  // lines
   struct Damage damage;
+  uint32_t fb_start;
 
   uint32_t RAM[MemWords];
   uint32_t ROM[ROMWords];
@@ -73,16 +77,30 @@
 static const uint32_t bootloader[ROMWords] = {
 #include "risc-boot.inc"
 };
+static const uint32_t bootloader1G[ROMWords] = {
+#include "risc-boot-1G.inc"
+};
 
 
 struct RISC *risc_new() {
   struct RISC *risc = calloc(1, sizeof(*risc));
   memcpy(risc->ROM, bootloader, sizeof(risc->ROM));
-  risc_screen_size_hack(risc, RISC_FRAMEBUFFER_WIDTH, RISC_FRAMEBUFFER_HEIGHT);
+  risc->damage = (struct Damage){
+    .x1 = 0, .y1 = 0,
+    .x2 = RISC_FRAMEBUFFER_WIDTH/32 - 1,
+    .y2 = RISC_FRAMEBUFFER_HEIGHT - 1
+  };
+  risc->fb_width = RISC_FRAMEBUFFER_WIDTH;
+  risc->fb_height = RISC_FRAMEBUFFER_HEIGHT;
+  risc->fb_start = DisplayStart;
   risc_reset(risc);
   return risc;
 }
 
+void risc_change_bootrom(struct RISC *risc) {
+  memcpy(risc->ROM, bootloader1G, sizeof(risc->ROM));
+}
+
 void risc_set_serial(struct RISC *risc, const struct RISC_Serial *serial) {
   risc->serial = serial;
 }
@@ -98,18 +116,15 @@
 }
 
 void risc_screen_size_hack(struct RISC *risc, int width, int height) {
-  risc->fb_width = width / 32;
-  risc->fb_height = height;
-  risc->damage = (struct Damage){
-    .x1 = 0,
-    .y1 = 0,
-    .x2 = risc->fb_width - 1,
-    .y2 = risc->fb_height - 1
-  };
-
-  risc->RAM[DisplayStart/4] = 0x53697A66;  // magic value 'SIZE'+1
-  risc->RAM[DisplayStart/4+1] = width;
-  risc->RAM[DisplayStart/4+2] = height;
+  if( width > 1024 || height > 768){
+    risc->fb_width = width;
+    risc->fb_height = height;
+    risc->fb_start = AltDisplayStart;
+  }
+  risc->RAM[risc->fb_start/4] = 0x53697A66; // magic value 'SIZE' + 1
+  risc->RAM[risc->fb_start/4+1] = width;
+  risc->RAM[risc->fb_start/4+2] = height;
+  risc->RAM[risc->fb_start/4+3] = DisplayDepth;
 }
 
 void risc_reset(struct RISC *risc) {
@@ -356,30 +371,28 @@
 }
 
 static void risc_update_damage(struct RISC *risc, int w) {
-  int row = w / risc->fb_width;
-  int col = w % risc->fb_width;
-  if (row < risc->fb_height) {
-    if (col < risc->damage.x1) {
-      risc->damage.x1 = col;
-    }
-    if (col > risc->damage.x2) {
-      risc->damage.x2 = col;
-    }
-    if (row < risc->damage.y1) {
-      risc->damage.y1 = row;
-    }
-    if (row > risc->damage.y2) {
-      risc->damage.y2 = row;
-    }
+  int row = w / (risc->fb_width / 32);
+  int col = w % (risc->fb_width / 32);
+  if (col < risc->damage.x1) {
+    risc->damage.x1 = col;
+  }
+  if (col > risc->damage.x2) {
+    risc->damage.x2 = col;
+  }
+  if (row < risc->damage.y1) {
+    risc->damage.y1 = row;
+  }
+  if (row > risc->damage.y2) {
+    risc->damage.y2 = row;
   }
 }
 
 static void risc_store_word(struct RISC *risc, uint32_t address, uint32_t value) {
-  if (address < DisplayStart) {
+  if (address < risc->fb_start) {
     risc->RAM[address/4] = value;
   } else if (address < MemSize) {
     risc->RAM[address/4] = value;
-    risc_update_damage(risc, address/4 - DisplayStart/4);
+    risc_update_damage(risc, address/4 - risc->fb_start/4);
   } else {
     risc_store_io(risc, address, value);
   }
@@ -565,14 +578,14 @@
   }
 }
 
-uint32_t *risc_get_framebuffer_ptr(struct RISC *risc) {
-  return &risc->RAM[DisplayStart/4];
+uint32_t *risc_get_framebuffer_ptr(struct RISC *risc) { 
+    return &risc->RAM[risc->fb_start/4];
 }
 
 struct Damage risc_get_framebuffer_damage(struct RISC *risc) {
   struct Damage dmg = risc->damage;
   risc->damage = (struct Damage){
-    .x1 = risc->fb_width,
+    .x1 = risc->fb_width/32,
     .x2 = 0,
     .y1 = risc->fb_height,
     .y2 = 0
